// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package atenadb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AtenaDBClient is the client API for AtenaDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtenaDBClient interface {
	Auth(ctx context.Context, in *AuthLookupModel, opts ...grpc.CallOption) (*AtenaAuthReply, error)
	AuthUser(ctx context.Context, in *AuthUserLookupModel, opts ...grpc.CallOption) (*AtenaAuthReply, error)
	CreateUser(ctx context.Context, in *CreateUserModel, opts ...grpc.CallOption) (*AtenaReply, error)
	ChangePassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*AtenaReply, error)
	CreateDB(ctx context.Context, in *DBInfo, opts ...grpc.CallOption) (*AtenaReply, error)
	CreateDBHT(ctx context.Context, in *DBModel, opts ...grpc.CallOption) (*AtenaReply, error)
	CreateDBRBT(ctx context.Context, in *DBModel, opts ...grpc.CallOption) (*AtenaReply, error)
	DeleteDB(ctx context.Context, in *DBInfo, opts ...grpc.CallOption) (*AtenaReply, error)
	SetRecord(ctx context.Context, in *AtenaSet, opts ...grpc.CallOption) (*AtenaReply, error)
	GetRecord(ctx context.Context, in *AtenaGet, opts ...grpc.CallOption) (*AtenaResponse, error)
	DeleteRecord(ctx context.Context, in *AtenaDel, opts ...grpc.CallOption) (*AtenaReply, error)
	IncrRecord(ctx context.Context, in *AtenaIncr, opts ...grpc.CallOption) (*AtenaResponse, error)
	RemoveAll(ctx context.Context, in *RemoveAllRecords, opts ...grpc.CallOption) (*AtenaReply, error)
	Logout(ctx context.Context, in *LogoutUser, opts ...grpc.CallOption) (*AtenaReply, error)
}

type atenaDBClient struct {
	cc grpc.ClientConnInterface
}

func NewAtenaDBClient(cc grpc.ClientConnInterface) AtenaDBClient {
	return &atenaDBClient{cc}
}

func (c *atenaDBClient) Auth(ctx context.Context, in *AuthLookupModel, opts ...grpc.CallOption) (*AtenaAuthReply, error) {
	out := new(AtenaAuthReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) AuthUser(ctx context.Context, in *AuthUserLookupModel, opts ...grpc.CallOption) (*AtenaAuthReply, error) {
	out := new(AtenaAuthReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) CreateUser(ctx context.Context, in *CreateUserModel, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) ChangePassword(ctx context.Context, in *NewPassword, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) CreateDB(ctx context.Context, in *DBInfo, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/CreateDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) CreateDBHT(ctx context.Context, in *DBModel, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/CreateDBHT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) CreateDBRBT(ctx context.Context, in *DBModel, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/CreateDBRBT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) DeleteDB(ctx context.Context, in *DBInfo, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/DeleteDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) SetRecord(ctx context.Context, in *AtenaSet, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/SetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) GetRecord(ctx context.Context, in *AtenaGet, opts ...grpc.CallOption) (*AtenaResponse, error) {
	out := new(AtenaResponse)
	err := c.cc.Invoke(ctx, "/AtenaDB/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) DeleteRecord(ctx context.Context, in *AtenaDel, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) IncrRecord(ctx context.Context, in *AtenaIncr, opts ...grpc.CallOption) (*AtenaResponse, error) {
	out := new(AtenaResponse)
	err := c.cc.Invoke(ctx, "/AtenaDB/IncrRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) RemoveAll(ctx context.Context, in *RemoveAllRecords, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/RemoveAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atenaDBClient) Logout(ctx context.Context, in *LogoutUser, opts ...grpc.CallOption) (*AtenaReply, error) {
	out := new(AtenaReply)
	err := c.cc.Invoke(ctx, "/AtenaDB/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtenaDBServer is the server API for AtenaDB service.
// All implementations must embed UnimplementedAtenaDBServer
// for forward compatibility
type AtenaDBServer interface {
	Auth(context.Context, *AuthLookupModel) (*AtenaAuthReply, error)
	AuthUser(context.Context, *AuthUserLookupModel) (*AtenaAuthReply, error)
	CreateUser(context.Context, *CreateUserModel) (*AtenaReply, error)
	ChangePassword(context.Context, *NewPassword) (*AtenaReply, error)
	CreateDB(context.Context, *DBInfo) (*AtenaReply, error)
	CreateDBHT(context.Context, *DBModel) (*AtenaReply, error)
	CreateDBRBT(context.Context, *DBModel) (*AtenaReply, error)
	DeleteDB(context.Context, *DBInfo) (*AtenaReply, error)
	SetRecord(context.Context, *AtenaSet) (*AtenaReply, error)
	GetRecord(context.Context, *AtenaGet) (*AtenaResponse, error)
	DeleteRecord(context.Context, *AtenaDel) (*AtenaReply, error)
	IncrRecord(context.Context, *AtenaIncr) (*AtenaResponse, error)
	RemoveAll(context.Context, *RemoveAllRecords) (*AtenaReply, error)
	Logout(context.Context, *LogoutUser) (*AtenaReply, error)
	mustEmbedUnimplementedAtenaDBServer()
}

// UnimplementedAtenaDBServer must be embedded to have forward compatible implementations.
type UnimplementedAtenaDBServer struct {
}

func (UnimplementedAtenaDBServer) Auth(context.Context, *AuthLookupModel) (*AtenaAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAtenaDBServer) AuthUser(context.Context, *AuthUserLookupModel) (*AtenaAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedAtenaDBServer) CreateUser(context.Context, *CreateUserModel) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAtenaDBServer) ChangePassword(context.Context, *NewPassword) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAtenaDBServer) CreateDB(context.Context, *DBInfo) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDB not implemented")
}
func (UnimplementedAtenaDBServer) CreateDBHT(context.Context, *DBModel) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDBHT not implemented")
}
func (UnimplementedAtenaDBServer) CreateDBRBT(context.Context, *DBModel) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDBRBT not implemented")
}
func (UnimplementedAtenaDBServer) DeleteDB(context.Context, *DBInfo) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDB not implemented")
}
func (UnimplementedAtenaDBServer) SetRecord(context.Context, *AtenaSet) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecord not implemented")
}
func (UnimplementedAtenaDBServer) GetRecord(context.Context, *AtenaGet) (*AtenaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedAtenaDBServer) DeleteRecord(context.Context, *AtenaDel) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedAtenaDBServer) IncrRecord(context.Context, *AtenaIncr) (*AtenaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrRecord not implemented")
}
func (UnimplementedAtenaDBServer) RemoveAll(context.Context, *RemoveAllRecords) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAll not implemented")
}
func (UnimplementedAtenaDBServer) Logout(context.Context, *LogoutUser) (*AtenaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAtenaDBServer) mustEmbedUnimplementedAtenaDBServer() {}

// UnsafeAtenaDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtenaDBServer will
// result in compilation errors.
type UnsafeAtenaDBServer interface {
	mustEmbedUnimplementedAtenaDBServer()
}

func RegisterAtenaDBServer(s grpc.ServiceRegistrar, srv AtenaDBServer) {
	s.RegisterService(&AtenaDB_ServiceDesc, srv)
}

func _AtenaDB_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLookupModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).Auth(ctx, req.(*AuthLookupModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserLookupModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).AuthUser(ctx, req.(*AuthUserLookupModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).CreateUser(ctx, req.(*CreateUserModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).ChangePassword(ctx, req.(*NewPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_CreateDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).CreateDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/CreateDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).CreateDB(ctx, req.(*DBInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_CreateDBHT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).CreateDBHT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/CreateDBHT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).CreateDBHT(ctx, req.(*DBModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_CreateDBRBT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).CreateDBRBT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/CreateDBRBT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).CreateDBRBT(ctx, req.(*DBModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_DeleteDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).DeleteDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/DeleteDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).DeleteDB(ctx, req.(*DBInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_SetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtenaSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).SetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/SetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).SetRecord(ctx, req.(*AtenaSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtenaGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).GetRecord(ctx, req.(*AtenaGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtenaDel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).DeleteRecord(ctx, req.(*AtenaDel))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_IncrRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AtenaIncr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).IncrRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/IncrRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).IncrRecord(ctx, req.(*AtenaIncr))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_RemoveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).RemoveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/RemoveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).RemoveAll(ctx, req.(*RemoveAllRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtenaDB_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtenaDBServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AtenaDB/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtenaDBServer).Logout(ctx, req.(*LogoutUser))
	}
	return interceptor(ctx, in, info, handler)
}

// AtenaDB_ServiceDesc is the grpc.ServiceDesc for AtenaDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AtenaDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AtenaDB",
	HandlerType: (*AtenaDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _AtenaDB_Auth_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _AtenaDB_AuthUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AtenaDB_CreateUser_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AtenaDB_ChangePassword_Handler,
		},
		{
			MethodName: "CreateDB",
			Handler:    _AtenaDB_CreateDB_Handler,
		},
		{
			MethodName: "CreateDBHT",
			Handler:    _AtenaDB_CreateDBHT_Handler,
		},
		{
			MethodName: "CreateDBRBT",
			Handler:    _AtenaDB_CreateDBRBT_Handler,
		},
		{
			MethodName: "DeleteDB",
			Handler:    _AtenaDB_DeleteDB_Handler,
		},
		{
			MethodName: "SetRecord",
			Handler:    _AtenaDB_SetRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _AtenaDB_GetRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _AtenaDB_DeleteRecord_Handler,
		},
		{
			MethodName: "IncrRecord",
			Handler:    _AtenaDB_IncrRecord_Handler,
		},
		{
			MethodName: "RemoveAll",
			Handler:    _AtenaDB_RemoveAll_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AtenaDB_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AtenaDB.proto",
}
